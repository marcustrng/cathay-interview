openapi: 3.0.3
info:
  title: Currency Exchange Rate API
  description: |
    A comprehensive currency exchange rate API providing historical and real-time exchange rates
    with support for extensive error handling.
    
    ## Key Features
    - Historical exchange rate data with flexible date ranges
    - Comprehensive OHLC (Open, High, Low, Close) data
    - Bid/Ask spreads for accurate pricing
    - Robust pagination and filtering
    - Detailed error responses with actionable messages
    
    ## Rate Limits
    - 1000 requests per hour per API key
    - Maximum 6-month date range per request
    - Maximum 100 records per response
  version: '1.0.0'
  contact:
    name: API Support
    email: api-support@example.com
    url: https://api.example.com/support
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: https://api.example.com/terms

servers:
  - url: https://api.example.com/api/v1
    description: Production server
  - url: https://staging-api.example.com/api/v1
    description: Staging server
  - url: https://dev-api.example.com/api/v1
    description: Development server

security:
  - ApiKeyAuth: []

paths:
  /currencies:
    get:
      summary: List all currencies
      description: >
        Returns a list of available currencies.  
        Supports internationalized responses based on the `Accept-Language` header.
      operationId: listCurrencies
      tags: [Currencies]
      parameters:
        - name: isActive
          in: query
          description: Filter by active status
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: List of currencies
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Currency'
                  meta:
                    type: object
                    properties:
                      message:
                        type: string
                        description: Localized success message
                        example: "Currencies retrieved successfully"
                      locale:
                        type: string
                        description: The resolved locale used for localization
                        example: "en-US"
        '400':
          description: Validation or bad request (localized error message)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Server error (localized error message)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a new currency
      operationId: createCurrency
      tags: [Currencies]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CurrencyCreateRequest'
      responses:
        '201':
          description: Currency created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Currency'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Currency already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /currencies/{code}:
    get:
      summary: Get currency by code
      operationId: getCurrency
      tags: [Currencies]
      parameters:
        - name: code
          in: path
          required: true
          description: 3-letter ISO currency code
          schema:
            type: string
            pattern: '^[A-Z]{3}$'
      responses:
        '200':
          description: Currency found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Currency'
        '404':
          description: Currency not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update currency by code
      operationId: updateCurrency
      tags: [Currencies]
      parameters:
        - name: code
          in: path
          required: true
          description: 3-letter ISO currency code
          schema:
            type: string
            pattern: '^[A-Z]{3}$'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CurrencyUpdateRequest'
      responses:
        '200':
          description: Currency updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Currency'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Currency not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict – duplicate or invalid state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete currency by code
      operationId: deleteCurrency
      tags: [Currencies]
      parameters:
        - name: code
          in: path
          required: true
          description: 3-letter ISO currency code
          schema:
            type: string
            pattern: '^[A-Z]{3}$'
      responses:
        '204':
          description: Currency deleted successfully
        '404':
          description: Currency not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict – unable to delete (referenced by another entity)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /exchange-rates/{base}/{quote}:
    get:
      summary: Get exchange rates for a currency pair
      description: |
        Retrieves historical exchange rate data for a specified currency pair within a given date range.
        
        **Supported Features:**
        - Flexible date ranges (up to 6 months)
        - OHLC data with bid/ask spreads
        - Pagination for large datasets
        
        **Data Freshness:**
        - Daily rates: Updated at market close (typically 17:00 UTC)
        - Hourly rates: Updated every hour
        - Minute rates: Updated every minute during market hours
      operationId: getExchangeRates
      tags:
        - Exchange Rates
      parameters:
        - name: base
          in: path
          required: true
          description: Base currency code (ISO 4217)
          schema:
            type: string
            pattern: '^[A-Z]{3}$'
            example: EUR
        - name: quote
          in: path
          required: true
          description: Quote currency code (ISO 4217)
          schema:
            type: string
            pattern: '^[A-Z]{3}$'
            example: USD
        - name: start_date
          in: query
          required: true
          description: Start date in ISO 8601 format (YYYY-MM-DD)
          schema:
            type: string
            format: date
            example: '2025-03-26'
        - name: end_date
          in: query
          required: true
          description: End date in ISO 8601 format (YYYY-MM-DD)
          schema:
            type: string
            format: date
            example: '2025-04-01'
      responses:
        '200':
          description: Successfully retrieved exchange rates
          headers:
            X-RateLimit-Limit:
              description: Request limit per hour
              schema:
                type: integer
                example: 1000
            X-RateLimit-Remaining:
              description: Remaining requests in current window
              schema:
                type: integer
                example: 999
            X-RateLimit-Reset:
              description: Unix timestamp when rate limit resets
              schema:
                type: integer
                example: 1640995200
            X-Request-ID:
              description: Unique request identifier for debugging
              schema:
                type: string
                example: req_123456789
            Cache-Control:
              description: Cache control header
              schema:
                type: string
                example: 'public, max-age=300'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExchangeRateResponse'
              examples:
                single_day:
                  summary: Single day response
                  value:
                    data:
                      - date: '2025-03-26T23:59:59Z'
                        base_currency: EUR
                        quote_currency: USD
                        rates:
                          bid:
                            open: '1.07500'
                            high: '1.08020'
                            low: '1.07322'
                            close: '1.07764'
                            average: '1.07764'
                          ask:
                            open: '1.07516'
                            high: '1.08035'
                            low: '1.07338'
                            close: '1.07780'
                            average: '1.07780'
                          mid: '1.07772'
                          spread: '0.00016'
                    meta:
                      total_records: 1
                      returned_records: 1
                      granularity: daily
                      date_range:
                        start: '2025-03-26'
                        end: '2025-03-27'
                    pagination:
                      limit: 100
                      offset: 0
                      has_more: false
                      next_url: null
                      prev_url: null
                multi_day:
                  summary: Multi-day response with pagination
                  value:
                    data:
                      - date: '2025-03-26T23:59:59Z'
                        base_currency: EUR
                        quote_currency: USD
                        rates:
                          bid:
                            open: '1.07500'
                            high: '1.08020'
                            low: '1.07322'
                            close: '1.07764'
                            average: '1.07764'
                          ask:
                            open: '1.07516'
                            high: '1.08035'
                            low: '1.07338'
                            close: '1.07780'
                            average: '1.07780'
                          mid: '1.07772'
                          spread: '0.00016'
                      - date: '2025-03-27T23:59:59Z'
                        base_currency: EUR
                        quote_currency: USD
                        rates:
                          bid:
                            open: '1.07780'
                            high: '1.08198'
                            low: '1.07402'
                            close: '1.07824'
                            average: '1.07824'
                          ask:
                            open: '1.07796'
                            high: '1.08213'
                            low: '1.07419'
                            close: '1.07840'
                            average: '1.07840'
                          mid: '1.07832'
                          spread: '0.00016'
                    meta:
                      total_records: 6
                      returned_records: 2
                      granularity: daily
                      date_range:
                        start: '2025-03-26'
                        end: '2025-04-01'
        '400':
          description: Bad request - validation error
          headers:
            X-Request-ID:
              description: Unique request identifier for debugging
              schema:
                type: string
                example: req_abc123
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_date_range:
                  summary: Invalid date range
                  value:
                    error:
                      code: VALIDATION_ERROR
                      message: Request validation failed
                      details:
                        - field: end_date
                          issue: must_be_after_start_date
                          message: 'End date (2025-02-01) must be after start date (2025-03-26)'
                          provided_value: '2025-02-01'
                      request_id: req_abc123
                      timestamp: '2025-08-26T10:30:00Z'
                      documentation_url: 'https://api.example.com/docs#date-validation'
                invalid_currency:
                  summary: Invalid currency code
                  value:
                    error:
                      code: INVALID_CURRENCY
                      message: Invalid currency code provided
                      details:
                        - field: base
                          issue: invalid_currency_code
                          message: "Currency code 'UER' is not supported. Did you mean 'EUR'?"
                          provided_value: UER
                          suggestions: [EUR, GBP, JPY]
                      request_id: req_def456
                      timestamp: '2025-08-26T10:30:00Z'
                      documentation_url: 'https://api.example.com/docs#supported-currencies'
                date_range_exceeded:
                  summary: Date range too large
                  value:
                    error:
                      code: DATE_RANGE_EXCEEDED
                      message: Date range exceeds maximum allowed period
                      details:
                        - field: date_range
                          issue: exceeds_maximum_period
                          message: 'Maximum allowed date range is 6 months. Requested range is 4 months and 6 days.'
                          provided_range:
                            start: '2025-03-26'
                            end: '2025-08-01'
                            days: 128
                          limits:
                            max_days: 180
                            max_months: 6
                      request_id: req_ghi789
                      timestamp: '2025-08-26T10:30:00Z'
                      documentation_url: 'https://api.example.com/docs#rate-limits'
        '401':
          description: Unauthorized - invalid or missing API key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: UNAUTHORIZED
                  message: Invalid or missing API key
                  request_id: req_unauth123
                  timestamp: '2025-08-26T10:30:00Z'
        '429':
          description: Rate limit exceeded
          headers:
            X-RateLimit-Limit:
              description: Request limit per hour
              schema:
                type: integer
                example: 1000
            X-RateLimit-Remaining:
              description: Remaining requests in current window
              schema:
                type: integer
                example: 0
            X-RateLimit-Reset:
              description: Unix timestamp when rate limit resets
              schema:
                type: integer
                example: 1640998800
            Retry-After:
              description: Seconds to wait before next request
              schema:
                type: integer
                example: 3600
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: RATE_LIMIT_EXCEEDED
                  message: API rate limit exceeded
                  details:
                    - field: rate_limit
                      issue: hourly_limit_exceeded
                      message: 'You have exceeded the hourly rate limit of 1000 requests'
                      retry_after: 3600
                  request_id: req_rate_limit
                  timestamp: '2025-08-26T10:30:00Z'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: INTERNAL_SERVER_ERROR
                  message: An unexpected error occurred
                  request_id: req_error500
                  timestamp: '2025-08-26T10:30:00Z'
        '503':
          description: Service unavailable
          headers:
            Retry-After:
              description: Seconds to wait before retrying
              schema:
                type: integer
                example: 300
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error:
                  code: SERVICE_UNAVAILABLE
                  message: Service temporarily unavailable
                  request_id: req_unavailable
                  timestamp: '2025-08-26T10:30:00Z'

  /exchange-rates/sync:
    post:
      summary: Manually sync exchange rates
      description: >
        Trigger a manual synchronization of exchange rates between the given
        base and quote currencies for the specified date range.
      operationId: manualSync
      tags:
        - Exchange Rates
      parameters:
        - in: query
          name: baseCurrency
          required: true
          schema:
            type: string
            example: USD
        - in: query
          name: quoteCurrency
          required: true
          schema:
            type: string
            example: TWD
        - in: query
          name: startDate
          required: true
          schema:
            type: string
            example: 2025-08-01
        - in: query
          name: endDate
          required: true
          schema:
            type: string
            example: 2025-08-26
      responses:
        "200":
          description: Sync executed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Exchange rates synced successfully
                  pair:
                    type: string
                    example: USD/TWD
                  period:
                    type: string
                    example: 2025-08-01 to 2025-08-26
        "500":
          description: Error while syncing exchange rates
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Database connection failed

  /exchange-rates/health:
    get:
      summary: Health check
      description: Check if the exchange rate sync service is healthy.
      operationId: healthCheck
      tags:
        - Exchange Rates
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  service:
                    type: string
                    example: exchange-rate-sync
                  timestamp:
                    type: string
                    format: date-time
                    example: 2025-08-27T12:00:00

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: |
        API key for authentication. Get your API key from the developer dashboard.
        
        Example: `X-API-Key: your_api_key_here`

  schemas:
    Currency:
      type: object
      properties:
        code:
          type: string
          pattern: '^[A-Z]{3}$'
          example: USD
        name:
          type: string
          example: United States Dollar
        numericCode:
          type: integer
          minimum: 1
          maximum: 999
          example: 840
        minorUnit:
          type: integer
          default: 2
          example: 2
        isActive:
          type: boolean
          default: true
          example: true
        createdAt:
          type: string
          format: date-time
          example: 2025-08-27T15:30:00Z
        updatedAt:
          type: string
          format: date-time
          example: 2025-08-27T15:45:00Z

    CurrencyCreateRequest:
      type: object
      required: [ code, name, numericCode ]
      properties:
        code:
          type: string
          pattern: '^[A-Z]{3}$'
          example: EUR
        name:
          type: string
          example: Euro
        numericCode:
          type: integer
          minimum: 1
          maximum: 999
          example: 978
        minorUnit:
          type: integer
          default: 2
          example: 2
        isActive:
          type: boolean
          default: true
          example: true

    CurrencyUpdateRequest:
      type: object
      properties:
        name:
          type: string
          example: Euro (updated)
        numericCode:
          type: integer
          minimum: 1
          maximum: 999
          example: 978
        minorUnit:
          type: integer
          example: 2
        isActive:
          type: boolean
          example: false

    ExchangeRateResponse:
      type: object
      required: [data, meta, pagination]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ExchangeRateData'
          description: Array of exchange rate data points
        meta:
          $ref: '#/components/schemas/ResponseMetadata'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    ExchangeRateData:
      type: object
      required: [date, base_currency, quote_currency, rates]
      properties:
        date:
          type: string
          description: Timestamp for the exchange rate data in `yyyy/MM/dd HH:mm:ss` format
          example: "1990/01/30 00:00:00"
        base_currency:
          type: string
          pattern: '^[A-Z]{3}$'
          description: Base currency code (ISO 4217)
          example: EUR
        quote_currency:
          type: string
          pattern: '^[A-Z]{3}$'
          description: Quote currency code (ISO 4217)
          example: USD
        rates:
          $ref: '#/components/schemas/ExchangeRates'

    ExchangeRates:
      type: object
      required: [bid, ask, mid, spread]
      properties:
        bid:
          $ref: '#/components/schemas/OHLC'
          description: Bid prices (what buyers are willing to pay)
        ask:
          $ref: '#/components/schemas/OHLC'
          description: Ask prices (what sellers are asking for)
        mid:
          type: string
          pattern: '^\d+\.\d{2,5}$'
          description: Mid-point between bid and ask
          example: '1.07772'
        spread:
          type: string
          pattern: '^\d+\.\d{2,5}$'
          description: Difference between ask and bid prices
          example: '0.00016'

    OHLC:
      type: object
      required: [open, high, low, close, average]
      properties:
        open:
          type: string
          pattern: '^\d+\.\d{2,5}$'
          description: Opening price for the period
          example: '1.07500'
        high:
          type: string
          pattern: '^\d+\.\d{2,5}$'
          description: Highest price during the period
          example: '1.08020'
        low:
          type: string
          pattern: '^\d+\.\d{2,5}$'
          description: Lowest price during the period
          example: '1.07322'
        close:
          type: string
          pattern: '^\d+\.\d{2,5}$'
          description: Closing price for the period
          example: '1.07764'
        average:
          type: string
          pattern: '^\d+\.\d{2,5}$'
          description: Volume-weighted average price for the period
          example: '1.07764'

    ResponseMetadata:
      type: object
      required: [total_records, returned_records, granularity, date_range]
      properties:
        total_records:
          type: integer
          minimum: 0
          description: Total number of records available
          example: 6
        returned_records:
          type: integer
          minimum: 0
          description: Number of records returned in this response
          example: 2
        granularity:
          type: string
          enum: [daily, hourly, minute]
          description: Data granularity level
          example: daily
        date_range:
          $ref: '#/components/schemas/DateRange'

    DateRange:
      type: object
      required: [start, end]
      properties:
        start:
          type: string
          format: date
          description: Start date of the requested range
          example: '2025-03-26'
        end:
          type: string
          format: date
          description: End date of the requested range
          example: '2025-04-01'

    PaginationInfo:
      type: object
      required: [limit, offset, has_more]
      properties:
        limit:
          type: integer
          minimum: 1
          maximum: 100
          description: Maximum number of records per page
          example: 100
        offset:
          type: integer
          minimum: 0
          description: Number of records skipped
          example: 0
        has_more:
          type: boolean
          description: Whether more records are available
          example: false
        next_url:
          type: string
          nullable: true
          format: uri
          description: URL for the next page of results
          example: '/api/v1/exchange-rates/EUR/USD?start_date=2025-03-26&end_date=2025-04-01&limit=2&offset=2'
        prev_url:
          type: string
          nullable: true
          format: uri
          description: URL for the previous page of results
          example: null

    ErrorResponse:
      type: object
      required: [error]
      properties:
        error:
          $ref: '#/components/schemas/ErrorDetails'

    ErrorDetails:
      type: object
      required: [code, message, request_id, timestamp]
      properties:
        code:
          type: string
          enum:
            - VALIDATION_ERROR
            - INVALID_CURRENCY
            - DATE_RANGE_EXCEEDED
            - INVALID_DATE_FORMAT
            - MISSING_REQUIRED_PARAMETER
            - UNAUTHORIZED
            - RATE_LIMIT_EXCEEDED
            - INTERNAL_SERVER_ERROR
            - SERVICE_UNAVAILABLE
          description: Machine-readable error code
          example: VALIDATION_ERROR
        message:
          type: string
          description: Human-readable error message
          example: Request validation failed
        details:
          type: array
          items:
            $ref: '#/components/schemas/ErrorDetail'
          description: Detailed information about the error
        request_id:
          type: string
          description: Unique identifier for this request
          example: req_123456789
        timestamp:
          type: string
          format: date-time
          description: When the error occurred
          example: '2025-08-26T10:30:00Z'
        documentation_url:
          type: string
          format: uri
          description: Link to relevant documentation
          example: 'https://api.example.com/docs#date-validation'

    ErrorDetail:
      type: object
      required: [field, issue, message]
      properties:
        field:
          type: string
          description: Field that caused the error
          example: end_date
        issue:
          type: string
          description: Machine-readable issue identifier
          example: must_be_after_start_date
        message:
          type: string
          description: Human-readable description of the issue
          example: 'End date (2025-02-01) must be after start date (2025-03-26)'
        provided_value:
          description: The value that was provided (can be any type)
          example: '2025-02-01'
        suggestions:
          type: array
          items:
            type: string
          description: Suggested alternative values
          example: [EUR, GBP, JPY]
        provided_range:
          type: object
          description: Details about provided date range (for range errors)
          properties:
            start:
              type: string
              format: date
            end:
              type: string
              format: date
            days:
              type: integer
        limits:
          type: object
          description: Information about limits that were exceeded
          properties:
            max_days:
              type: integer
            max_months:
              type: integer
        retry_after:
          type: integer
          description: Seconds to wait before retrying (for rate limit errors)

tags:
  - name: Exchange Rates
    description: Historical and real-time exchange rate operations